{"version":3,"sources":["../../../projects/pp-breadcrumbs/src/lib/breadcrumbs.resolver.ts","../../../projects/pp-breadcrumbs/src/lib/breadcrumbs.service.ts","../../../projects/pp-breadcrumbs/src/lib/breadcrumbs.component.ts","../../../projects/pp-breadcrumbs/src/lib/breadcrumbs.module.ts"],"names":["PpBreadcrumbsResolver","prototype","resolve","route","state","data","routeConfig","path","this","getFullPath","rawText","breadcrumbs","text","of","stringFormat","pathFromRoot","reduce","a","v","url","templateString","binding","template","interpolate","compiled","Injectable","PpBreadcrumbsService","router","injector","_this","BehaviorSubject","defaultResolver","subscription","events","pipe","filter","x","NavigationEnd","concatMap","onNavigationEnd","subscribe","Object","defineProperty","asObservable","ngOnDestroy","_a","unsubscribe","complete","resolveCrumbs","routerState","snapshot","root","mergeMap","distinct","breadcrumb","toArray","postProcess","wrapIntoObservable","first","tap","next","crumbs$","result","getBreadcrumbResolver","firstChild","concat","get","value","isObservable","from","Promise","args","providedIn","Router","Injector","PpBreadcrumbsComponent","service","ngOnInit","crumbs","Component","selector","NgModule","declarations","imports","CommonModule","RouterModule","exports"],"mappings":"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","sourcesContent":["import {ActivatedRouteSnapshot, Resolve, RouterStateSnapshot, UrlSegment} from '@angular/router';\r\nimport {Observable, of} from 'rxjs';\r\nimport {Breadcrumb} from './breadcrumb';\r\nimport {Injectable} from '@angular/core';\r\nimport {template} from 'lodash';\r\n\r\n@Injectable()\r\nexport class PpBreadcrumbsResolver implements Resolve<Breadcrumb[]> {\r\n\r\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Breadcrumb[]> | Promise<Breadcrumb[]> | Breadcrumb[] {\r\n    const data = route.routeConfig.data;\r\n    const path = this.getFullPath(route);\r\n    const rawText = typeof data.breadcrumbs === 'string' ? data.breadcrumbs : data.breadcrumbs.text || data.text || path;\r\n\r\n    return of([\r\n      {\r\n        path: path,\r\n        text: this.stringFormat(rawText, route.data)\r\n      }\r\n    ]);\r\n  }\r\n\r\n  protected getFullPath(route: ActivatedRouteSnapshot): string {\r\n    const relativePath = (segments: UrlSegment[]) => segments.reduce((a, v) => (a += '/' + v.path), '');\r\n    const fullPath = (routes: ActivatedRouteSnapshot[]) => routes.reduce((a, v) => (a += relativePath(v.url)), '');\r\n    return fullPath(route.pathFromRoot);\r\n  }\r\n\r\n  protected stringFormat(templateString: string, binding: any): string {\r\n    const compiled = template(templateString, { interpolate: /{{(.+?)}}/g });\r\n    return compiled(binding);\r\n  }\r\n}\r\n","import {Injectable, Injector, OnDestroy, Type} from '@angular/core';\r\nimport {ActivatedRouteSnapshot, NavigationEnd, Router} from '@angular/router';\r\nimport {BehaviorSubject, concat, from, isObservable, Observable, of, Subscription} from 'rxjs';\r\n\r\nimport {PpBreadcrumbsResolver} from './breadcrumbs.resolver';\r\nimport {concatMap, distinct, filter, first, mergeMap, tap, toArray} from 'rxjs/operators';\r\nimport {Breadcrumb} from './breadcrumb';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PpBreadcrumbsService implements OnDestroy {\r\n\r\n  postProcess: (crumbs: Breadcrumb[]) => Promise<Breadcrumb[]> | Observable<Breadcrumb[]> | Breadcrumb[];\r\n\r\n  protected breadcrumbs = new BehaviorSubject<Breadcrumb[]>([]);\r\n  protected defaultResolver = new PpBreadcrumbsResolver();\r\n  protected subscription?: Subscription;\r\n\r\n  get crumbs$(): Observable<Breadcrumb[]> {\r\n    return this.breadcrumbs.asObservable();\r\n  }\r\n\r\n  constructor(protected router: Router, protected injector: Injector) {\r\n    this.subscription = this.router.events.pipe(\r\n      filter(x => x instanceof NavigationEnd),\r\n      concatMap(() => this.onNavigationEnd())\r\n    ).subscribe();\r\n\r\n    this.onNavigationEnd().subscribe();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription?.unsubscribe();\r\n    this.breadcrumbs.complete();\r\n  }\r\n\r\n  protected onNavigationEnd() {\r\n    return this.resolveCrumbs(this.router.routerState.snapshot.root).pipe(\r\n      mergeMap((breadcrumbs) => breadcrumbs),\r\n      distinct((breadcrumb) => breadcrumb.text),\r\n      toArray(),\r\n      mergeMap((breadcrumbs) => {\r\n        return this.postProcess ? this.wrapIntoObservable(this.postProcess(breadcrumbs)).pipe(first()) : of(breadcrumbs);\r\n      }),\r\n      tap((breadcrumbs) => this.breadcrumbs.next(breadcrumbs))\r\n    );\r\n  }\r\n\r\n  protected resolveCrumbs(route: ActivatedRouteSnapshot): Observable<Breadcrumb[]> {\r\n    let crumbs$: Observable<Breadcrumb[]> = of([]);\r\n    const data = route.routeConfig?.data;\r\n\r\n    if (data?.breadcrumbs) {\r\n      const resolver = this.getBreadcrumbResolver(data.breadcrumbs);\r\n      const result = resolver.resolve(route, this.router.routerState.snapshot);\r\n      crumbs$ = this.wrapIntoObservable(result).pipe(first());\r\n    }\r\n\r\n    return route.firstChild ? concat(crumbs$, this.resolveCrumbs(route.firstChild)) : crumbs$;\r\n  }\r\n\r\n  protected getBreadcrumbResolver(breadcrumbs: string | Type<PpBreadcrumbsResolver>): PpBreadcrumbsResolver {\r\n    return typeof breadcrumbs === 'function' && breadcrumbs.prototype instanceof PpBreadcrumbsResolver\r\n      ? this.injector.get<PpBreadcrumbsResolver>(breadcrumbs)\r\n      : this.defaultResolver;\r\n  }\r\n\r\n  protected wrapIntoObservable<T>(value: T | Promise<T> | Observable<T>): Observable<T> {\r\n    return isObservable(value) ? value : from(Promise.resolve(value));\r\n  }\r\n}\r\n","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\nimport {Breadcrumb} from './breadcrumb';\r\nimport {PpBreadcrumbsService} from './breadcrumbs.service';\r\n\r\n@Component({\r\n  selector: 'pp-breadcrumbs',\r\n  templateUrl: './breadcrumbs.component.html',\r\n  styleUrls: ['./breadcrumbs.component.scss']\r\n})\r\nexport class PpBreadcrumbsComponent implements OnInit, OnDestroy {\r\n  crumbs: Breadcrumb[];\r\n\r\n  protected subscription?: Subscription;\r\n\r\n  constructor(protected service: PpBreadcrumbsService) {}\r\n\r\n  public ngOnInit(): void {\r\n    this.subscription = this.service.crumbs$.subscribe((crumbs) => {\r\n      this.crumbs = crumbs;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription?.unsubscribe();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {RouterModule} from '@angular/router';\r\nimport {CommonModule} from '@angular/common';\r\n\r\nimport { PpBreadcrumbsComponent } from './breadcrumbs.component';\r\n\r\n@NgModule({\r\n  declarations: [PpBreadcrumbsComponent],\r\n  imports: [CommonModule, RouterModule],\r\n  exports: [PpBreadcrumbsComponent]\r\n})\r\nexport class PpBreadcrumbsModule { }\r\n"]}